(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
    typeof define === 'function' && define.amd ? define(['exports'], factory) :
    (global = global || self, factory(global.htmlScreenCaptureJs = {}));
}(this, (function (exports) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    (function (OutputType) {
        OutputType["OBJECT"] = "object";
        OutputType["STRING"] = "string";
        OutputType["URI"] = "uri";
        OutputType["BASE64"] = "base64";
    })(exports.OutputType || (exports.OutputType = {}));
    (function (LogLevel) {
        LogLevel["DEBUG"] = "debug";
        LogLevel["INFO"] = "info";
        LogLevel["WARN"] = "warn";
        LogLevel["ERROR"] = "error";
        LogLevel["FATAL"] = "fatal";
        LogLevel["OFF"] = "off";
    })(exports.LogLevel || (exports.LogLevel = {}));

    var selectedLogLevel = exports.LogLevel.WARN;
    var setLogLevel = function (levelName) {
        if (levelName === void 0) { levelName = exports.LogLevel.WARN; }
        selectedLogLevel = levelName;
    };
    var getLogLevel = function () {
        return selectedLogLevel;
    };
    var log = function (msg, levelName) {
        if (levelName === void 0) { levelName = selectedLogLevel; }
        console.log('|html-screen-capture-js|' + levelName + '| ' + msg);
    };
    var isDebug = function () {
        return selectedLogLevel === exports.LogLevel.DEBUG;
    };
    var debug = function (msg) {
        log(msg, exports.LogLevel.DEBUG);
    };
    var info = function (msg) {
        log(msg, exports.LogLevel.INFO);
    };
    var warn = function (msg) {
        log(msg, exports.LogLevel.WARN);
    };
    var error = function (msg) {
        log(msg, exports.LogLevel.ERROR);
    };
    var fatal = function (msg) {
        log(msg, exports.LogLevel.FATAL);
    };
    var logger = {
        isDebug: isDebug,
        setLogLevel: setLogLevel,
        getLogLevel: getLogLevel,
        debug: debug,
        info: info,
        warn: warn,
        error: error,
        fatal: fatal,
    };

    var utf8Encode = function (str) {
        var target = str.replace(/\r\n/g, '\n');
        var utfText = '';
        for (var n = 0; n < target.length; n++) {
            var c = target.charCodeAt(n);
            if (c < 128) {
                utfText += String.fromCharCode(c);
            }
            else if (c > 127 && c < 2048) {
                utfText += String.fromCharCode((c >> 6) | 192);
                utfText += String.fromCharCode((c & 63) | 128);
            }
            else {
                utfText += String.fromCharCode((c >> 12) | 224);
                utfText += String.fromCharCode(((c >> 6) & 63) | 128);
                utfText += String.fromCharCode((c & 63) | 128);
            }
        }
        return utfText;
    };
    var base64Encode = function (str) {
        var output = '';
        var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
        var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
        var i = 0;
        str = utf8Encode(str);
        while (i < str.length) {
            chr1 = str.charCodeAt(i++);
            chr2 = str.charCodeAt(i++);
            chr3 = str.charCodeAt(i++);
            enc1 = chr1 >> 2;
            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
            enc4 = chr3 & 63;
            if (isNaN(chr2)) {
                enc3 = enc4 = 64;
            }
            else if (isNaN(chr3)) {
                enc4 = 64;
            }
            output = output + keyStr.charAt(enc1) + keyStr.charAt(enc2) + keyStr.charAt(enc3) + keyStr.charAt(enc4);
        }
        return output;
    };
    var uriEncode = function (str) {
        return (str ? encodeURI(str) : '') || '';
    };

    var getClassName = function (domElm) {
        var className = domElm.className;
        return (className instanceof SVGAnimatedString ? className.baseVal : className) || '';
    };
    var getClasses = function (domElm) {
        var className = getClassName(domElm);
        var classNames = className ? className.split(' ') : [];
        return classNames.reduce(function (result, c) {
            if (c) {
                result.push(c);
            }
            return result;
        }, []);
    };
    var handleElmCss = function (context, domElm, newElm) {
        var handleOrigClassAndStyle = function () {
            if (getClasses(newElm).length > 0) {
                newElm.setAttribute(context.options.attrKeyForSavingElementOrigClass, getClassName(newElm));
                newElm.removeAttribute('class');
            }
            if (newElm.getAttribute('style')) {
                newElm.setAttribute(context.options.attrKeyForSavingElementOrigStyle, newElm.getAttribute('style') || '');
                newElm.removeAttribute('style');
            }
        };
        var handleRegularElmStyle = function () {
            var classStr = 'c0 ';
            var computedStyle = getComputedStyle(domElm);
            for (var i = 0; i < computedStyle.length; i++) {
                var property = computedStyle.item(i);
                var value = computedStyle.getPropertyValue(property);
                if (value !== context.baseClass.get(property)) {
                    var mapKey = property + ':' + value;
                    var className = context.classMap.get(mapKey) || '';
                    if (!className) {
                        context.classCount++;
                        className = "" + context.options.prefixForNewGeneratedClasses + context.classCount;
                        context.classMap.set(mapKey, className);
                    }
                    classStr += className + ' ';
                }
            }
            return classStr;
        };
        var handlePseudoElmsStyle = function () {
            var classStr = '';
            for (var _i = 0, _a = ['::before', '::after']; _i < _a.length; _i++) {
                var pseudoType = _a[_i];
                var computedStyle = getComputedStyle(domElm, pseudoType);
                if (!['none', 'normal'].includes(computedStyle.content)) {
                    context.pseudoClassCount++;
                    var className = "" + context.options.prefixForNewGeneratedPseudoClasses + context.pseudoClassCount;
                    classStr += className + ' ';
                    context.pseudoStyles.push("." + className + pseudoType + "{");
                    for (var i = 0; i < computedStyle.length; i++) {
                        var property = computedStyle.item(i);
                        var value = computedStyle.getPropertyValue(property);
                        context.pseudoStyles.push(property + ":" + value + ";");
                    }
                    context.pseudoStyles.push('}');
                }
            }
            return classStr;
        };
        handleOrigClassAndStyle();
        var classStr = handleRegularElmStyle();
        classStr += handlePseudoElmsStyle();
        newElm.setAttribute('class', classStr.trim());
    };
    var getCanvasDataUrl = function (context, domElm) {
        var canvasDataUrl = '';
        try {
            if (!context.canvas) {
                context.canvas = context.doc.createElement('canvas');
            }
            context.canvas.width = domElm instanceof HTMLImageElement ? domElm.naturalWidth : domElm.offsetWidth;
            context.canvas.height = domElm instanceof HTMLImageElement ? domElm.naturalHeight : domElm.offsetHeight;
            var ctx = context.canvas.getContext('2d');
            if (ctx) {
                ctx.drawImage(domElm, 0, 0);
            }
            canvasDataUrl = context.canvas.toDataURL(context.options.imageFormatForDataUrl, context.options.imageQualityForDataUrl);
        }
        catch (ex) {
            logger.warn("getCanvasDataUrl() - " + ex.message);
        }
        return canvasDataUrl;
    };
    var handleInputElement = function (domElm, newElm) {
        newElm.setAttribute('value', domElm.value);
        var domType = domElm.getAttribute('type');
        if (domElm instanceof HTMLInputElement && (domType === 'checkbox' || domType === 'radio')) {
            if (domElm.checked) {
                newElm.setAttribute('checked', 'checked');
            }
            else {
                newElm.removeAttribute('checked');
            }
        }
        else if (domElm instanceof HTMLTextAreaElement && domElm.value) {
            newElm.innerText = domElm.value;
        }
        else if (domElm instanceof HTMLSelectElement && domElm.value && domElm.children) {
            for (var i = domElm.children.length - 1; i >= 0; i--) {
                if (domElm.children[i].getAttribute('value') === domElm.value) {
                    newElm.children[i].setAttribute('selected', '');
                }
                else {
                    newElm.children[i].removeAttribute('selected');
                }
            }
        }
    };
    var handleImageElement = function (context, domElm, newElm) {
        if (context.shouldHandleImgDataUrl) {
            var imgDataUrl = getCanvasDataUrl(context, domElm);
            if (imgDataUrl) {
                newElm.setAttribute('src', imgDataUrl);
            }
        }
    };
    var handleCanvasElement = function (context, domElm, newElm) {
        var canvasDataUrl = getCanvasDataUrl(context, domElm);
        if (canvasDataUrl) {
            newElm.setAttribute('src', canvasDataUrl);
        }
        newElm.outerHTML = newElm.outerHTML.replace(/<canvas/g, '<img');
    };
    var shouldIgnoreElm = function (context, domElm) {
        if ((!context.isBody && context.options.tagsOfIgnoredDocHeadElements.includes(domElm.tagName.toLowerCase())) ||
            (context.isBody && context.options.tagsOfIgnoredDocBodyElements.includes(domElm.tagName.toLowerCase()))) {
            return true;
        }
        var attrKeyValuePairsOfIgnoredElements = Object.entries(context.options.attrKeyValuePairsOfIgnoredElements);
        if (attrKeyValuePairsOfIgnoredElements.length > 0) {
            for (var i = 0; i < domElm.attributes.length; i++) {
                if (domElm.attributes[i].specified) {
                    for (var _i = 0, attrKeyValuePairsOfIgnoredElements_1 = attrKeyValuePairsOfIgnoredElements; _i < attrKeyValuePairsOfIgnoredElements_1.length; _i++) {
                        var _a = attrKeyValuePairsOfIgnoredElements_1[_i], k = _a[0], v = _a[1];
                        if (k === domElm.attributes[i].name && v === domElm.attributes[i].value) {
                            return true;
                        }
                    }
                }
            }
        }
        var classesOfIgnoredDocBodyElements = context.options.classesOfIgnoredDocBodyElements;
        if (context.isBody && classesOfIgnoredDocBodyElements.length > 0) {
            var domElmClasses = getClasses(domElm);
            for (var _b = 0, domElmClasses_1 = domElmClasses; _b < domElmClasses_1.length; _b++) {
                var c = domElmClasses_1[_b];
                if (classesOfIgnoredDocBodyElements.includes(c)) {
                    return true;
                }
            }
        }
        var computedStyleKeyValuePairsOfIgnoredElements = Object.entries(context.options.computedStyleKeyValuePairsOfIgnoredElements);
        if (context.isBody && computedStyleKeyValuePairsOfIgnoredElements.length > 0) {
            var computedStyle = getComputedStyle(domElm);
            for (var _c = 0, computedStyleKeyValuePairsOfIgnoredElements_1 = computedStyleKeyValuePairsOfIgnoredElements; _c < computedStyleKeyValuePairsOfIgnoredElements_1.length; _c++) {
                var _d = computedStyleKeyValuePairsOfIgnoredElements_1[_c], k = _d[0], v = _d[1];
                if (computedStyle.getPropertyValue(k) === v) {
                    return true;
                }
            }
        }
        return false;
    };
    var recursiveWalk = function (context, domElm, newElm, handleCss) {
        if (context.isBody) {
            if (domElm instanceof HTMLInputElement ||
                domElm instanceof HTMLTextAreaElement ||
                domElm instanceof HTMLSelectElement) {
                handleInputElement(domElm, newElm);
            }
            else if (domElm instanceof HTMLImageElement) {
                handleImageElement(context, domElm, newElm);
            }
            else if (domElm instanceof HTMLCanvasElement) {
                handleCanvasElement(context, domElm, newElm);
            }
        }
        if (handleCss) {
            handleElmCss(context, domElm, newElm);
            if (context.options.tagsOfSkippedElementsForChildTreeCssHandling.includes(domElm.tagName.toLowerCase())) {
                handleCss = false;
            }
        }
        if (domElm.children) {
            for (var i = domElm.children.length - 1; i >= 0; i--) {
                if (shouldIgnoreElm(context, domElm.children[i])) {
                    newElm.removeChild(newElm.children[i]);
                }
                else {
                    recursiveWalk(context, domElm.children[i], newElm.children[i], handleCss);
                }
            }
        }
    };
    var createBaseClass = function (context) {
        var dummyElm = context.doc.createElement('div');
        dummyElm.style['display'] = 'none';
        context.doc.body.appendChild(dummyElm);
        var computedStyle = getComputedStyle(dummyElm);
        for (var i = 0; i < computedStyle.length; i++) {
            var property = computedStyle.item(i);
            var value = computedStyle.getPropertyValue(property);
            context.baseClass.set(property, value);
        }
        context.baseClass.set('display', 'block');
        if (dummyElm.parentNode) {
            dummyElm.parentNode.removeChild(dummyElm);
        }
    };
    var getHtmlObject = function (context) {
        var createNewHtml = function () {
            var newHtml = context.doc.documentElement.cloneNode(false);
            handleElmCss(context, context.doc.documentElement, newHtml);
            return newHtml;
        };
        var appendNewHead = function (newHtml) {
            var newHead = context.doc.head.cloneNode(true);
            context.isBody = false;
            recursiveWalk(context, context.doc.head, newHead, false);
            newHtml.appendChild(newHead);
        };
        var appendNewBody = function (newHtml) {
            createBaseClass(context);
            var newBody = context.doc.body.cloneNode(true);
            context.isBody = true;
            recursiveWalk(context, context.doc.body, newBody, true);
            newHtml.appendChild(newBody);
        };
        var appendNewStyle = function (newHtml) {
            var style = context.doc.createElement('style');
            var cssText = '.c0{';
            context.baseClass.forEach(function (v, k) {
                cssText += k + ":" + v + ";";
            });
            cssText += '}';
            context.classMap.forEach(function (v, k) {
                cssText += "." + v + "{" + k + "}";
            });
            cssText += context.pseudoStyles.join('');
            cssText += context.options.rulesToAddToDocStyle.join('');
            style.appendChild(context.doc.createTextNode(cssText));
            newHtml.children[0].appendChild(style);
        };
        var newHtml = createNewHtml();
        appendNewHead(newHtml);
        appendNewBody(newHtml);
        appendNewStyle(newHtml);
        return newHtml;
    };
    var prepareOutput = function (newHtmlObject, outputType) {
        if (outputType === void 0) { outputType = exports.OutputType.OBJECT; }
        var output = null;
        if (outputType === exports.OutputType.OBJECT) {
            output = newHtmlObject;
        }
        else {
            var outerHtml = (newHtmlObject ? newHtmlObject.outerHTML : '') || '';
            if (outerHtml) {
                if (outputType === exports.OutputType.STRING) {
                    output = outerHtml;
                }
                else if (outputType === exports.OutputType.URI) {
                    output = uriEncode(outerHtml);
                }
                else if (outputType === exports.OutputType.BASE64) {
                    output = base64Encode(outerHtml);
                }
            }
            output = output || '';
        }
        if (logger.isDebug()) {
            logger.debug("output: " + (output instanceof HTMLElement ? output.outerHTML : output));
        }
        return output;
    };
    var goCapture = function (outputType, htmlDocument, options) {
        var startTime = new Date().getTime();
        var output = null;
        var context = {
            isBody: false,
            baseClass: new Map(),
            classMap: new Map(),
            classCount: 0,
            pseudoStyles: [],
            pseudoClassCount: 0,
            shouldHandleImgDataUrl: true,
            canvas: null,
            doc: htmlDocument || document,
            options: __assign({
                rulesToAddToDocStyle: [],
                tagsOfIgnoredDocHeadElements: ['script', 'link', 'style'],
                tagsOfIgnoredDocBodyElements: ['script'],
                classesOfIgnoredDocBodyElements: [],
                attrKeyValuePairsOfIgnoredElements: {},
                computedStyleKeyValuePairsOfIgnoredElements: { display: 'none' },
                tagsOfSkippedElementsForChildTreeCssHandling: ['svg'],
                attrKeyForSavingElementOrigClass: '_class',
                attrKeyForSavingElementOrigStyle: '_style',
                prefixForNewGeneratedClasses: 'c',
                prefixForNewGeneratedPseudoClasses: 'p',
                imageFormatForDataUrl: 'image/png',
                imageQualityForDataUrl: 0.92,
                logLevel: exports.LogLevel.WARN,
            }, options),
        };
        try {
            logger.setLogLevel(context.options.logLevel);
            logger.info("goCapture() outputType: " + outputType + " - start");
            var newHtmlObject = getHtmlObject(context);
            output = prepareOutput(newHtmlObject, outputType);
        }
        catch (ex) {
            logger.error("goCapture() - error - " + ex.message);
        }
        finally {
            logger.info("goCapture() - end - " + (new Date().getTime() - startTime) + "ms");
        }
        return output;
    };

    var capture = function (outputType, htmlDocument, options) {
        return goCapture(outputType, htmlDocument, options);
    };

    exports.capture = capture;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=html-screen-capture.min.js.map
